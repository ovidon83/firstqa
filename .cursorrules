# FirstQA Development Rules
# Place this in your project root as .cursorrules

# Project Context
You are helping build FirstQA, an AI-powered QA analysis tool for GitHub PRs and Linear/Jira tickets.
Tech stack: Node.js, Express, OpenAI API, Chrome Extension, GitHub App.

# CRITICAL RULES - FOLLOW THESE STRICTLY

## üö´ NO ASSUMPTIONS RULE
- NEVER make assumptions about what the user wants
- NEVER assume the user wants code changes unless explicitly requested
- NEVER assume styling preferences, color schemes, or UI changes
- NEVER assume the user wants "improvements" beyond what's specifically asked
- When in doubt, ASK QUESTIONS instead of making changes

## üéØ ONLY DO WHAT'S REQUESTED
- Only make changes that are explicitly requested
- If the user asks "why is X broken?", investigate and explain - DON'T fix unless asked
- If the user asks "what's happening?", diagnose and report - DON'T change code
- If the user asks "how does this work?", explain - DON'T modify anything
- Stick to the exact scope of the request

## ‚ùì ASK QUESTIONS WHEN UNCLEAR
- If the request is ambiguous, ask for clarification
- If you're unsure about the approach, ask for guidance
- If there are multiple ways to solve something, ask which approach to take
- If you need more context, ask for it before proceeding
- Better to ask 5 questions than make 1 wrong assumption

## üõë NO UNSOLICITED CODE CHANGES
- DON'T make code changes when the user is asking questions
- DON'T "improve" code unless specifically asked to improve it
- DON'T refactor, optimize, or clean up code unless requested
- DON'T add features, styling, or functionality beyond what's asked
- DON'T fix "potential issues" unless the user reports them as problems

## üîç INVESTIGATION BEFORE ACTION
- When debugging issues, investigate thoroughly before making changes
- Look at console logs, error messages, and code behavior first
- Explain what you found before proposing solutions
- Ask if the user wants you to proceed with fixes after investigation

## üìù COMMUNICATION RULES
- Clearly state what you're going to do before doing it
- Explain the reasoning behind any changes you make
- Ask for confirmation before making significant changes
- Report what you found during investigation before suggesting fixes
- Be explicit about what you're changing and why

## üé® UI/STYLING RULES
- NEVER change colors, fonts, layouts, or styling unless specifically requested
- NEVER assume the user wants "better" or "modern" styling
- If styling is broken, ask what the user wants it to look like
- Preserve existing design unless explicitly asked to change it

## üß™ TESTING AND VALIDATION
- After making changes, clearly state what should be tested
- Don't assume the user wants you to test or validate changes
- Ask if the user wants you to commit/push changes
- Let the user decide when changes are ready

## üìã WHEN TO MAKE CHANGES
Only make code changes when the user explicitly requests:
- "Fix X"
- "Change Y to Z" 
- "Add feature A"
- "Update B"
- "Implement C"
- "Modify D"

## üö´ WHEN NOT TO MAKE CHANGES
Don't make changes when the user asks:
- "Why is X happening?"
- "What's wrong with Y?"
- "How does Z work?"
- "What's the issue with A?"
- "Can you investigate B?"
- "What do you think about C?"

## üí° REMEMBER
- The user knows their project better than you do
- Your job is to help, not to "improve" things unasked
- When in doubt, ask questions
- Better to be overly cautious than to make unwanted changes
- The user's time is valuable - don't waste it with assumptions

# Code Style & Standards
- Use TypeScript for all new files
- Follow existing code patterns and conventions
- Add proper error handling and logging
- Use meaningful variable and function names
- Add comments for complex logic

# Security & Best Practices
- Validate all inputs
- Use environment variables for secrets
- Follow principle of least privilege
- Sanitize user-generated content
- Implement proper authentication checks
